/*

Boost Software License - Version 1.0 - August 17th,2003

Permission is hereby granted,free of charge,to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use,reproduce,display,distribute,
execute,and transmit the Software,and to prepare derivative works of the
Software,and to permit third-parties to whom the Software is furnished to
do so,all subject to the following:

The copyright notices in the Software and this entire statement,including
the above license grant,this restriction and the following disclaimer,
must be included in all copies of the Software,in whole or in part,and
all derivative works of the Software,unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS",WITHOUT WARRANTY OF ANY KIND,EXPRESS OR
IMPLIED,INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE,TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY,WHETHER IN CONTRACT,TORT OR OTHERWISE,
ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.allegro5.functions;

private {
    import core.stdc.stdarg,
           core.stdc.stdint,
           core.stdc.time;

    import derelict.util.system;
    import derelict.allegro5.types;
}

nothrow {
    // memory.h
    void* al_malloc(size_t n,int line = __LINE__,const(char)* file = __FILE__.ptr) {
        return al_malloc_with_context(n,line,file,"");
    }

    void al_free(void* p,int line = __LINE__,const(char)* file = __FILE__.ptr) {
        al_free_with_context(p,line,file,"");
    }

    void* al_realloc(void* p,size_t n,int line = __LINE__,const(char)* file = __FILE__.ptr) {
        return al_realloc_with_context(p,n,line,file,"");
    }

    void* al_calloc(size_t c,size_t n,int line = __LINE__,const(char)* file = __FILE__.ptr) {
        return al_calloc_with_context(c,n,line,file,"");
    }

    // system.h
    bool al_init() {
        import core.stdc.stdlib;
        return al_install_system(ALLEGRO_VERSION_INT,&atexit);
    }
}


extern(C) @nogc nothrow {
    // altime.h
    alias da_al_get_time = double function();
    alias da_al_rest = void function(double);
    alias da_al_init_timeout = void function(ALLEGRO_TIMEOUT*,double);

    // base.h
    alias da_al_get_allegro_version = uint function();
    alias da_al_run_main = int function(int,char**,int function(int,char**));

    // bitmap.h
    alias da_al_set_new_bitmap_format = void function(int);
    alias da_al_set_new_bitmap_flags = void function(int);
    alias da_al_get_new_bitmap_format = int function();
    alias da_al_get_new_bitmap_flags = int function();
    alias da_al_add_new_bitmap_flag = void function(int);

    alias da_al_get_bitmap_width = int function(ALLEGRO_BITMAP*);
    alias da_al_get_bitmap_height = int function(ALLEGRO_BITMAP*);
    alias da_al_get_bitmap_format = int function(ALLEGRO_BITMAP*);
    alias da_al_get_bitmap_flags = int function(ALLEGRO_BITMAP*);

    alias da_al_create_bitmap = ALLEGRO_BITMAP* function(int,int);
    alias da_al_destroy_bitmap = void function(ALLEGRO_BITMAP*);

    alias da_al_put_pixel = void function(int,int,ALLEGRO_COLOR);
    alias da_al_put_blended_pixel = void function(int,int,ALLEGRO_COLOR);
    alias da_al_get_pixel = ALLEGRO_COLOR function(ALLEGRO_BITMAP*,int,int);

    alias da_al_convert_mask_to_alpha = void function(ALLEGRO_BITMAP*,ALLEGRO_COLOR);

    alias da_al_set_clipping_rectangle = void function(int,int,int,int);
    alias da_al_reset_clipping_rectangle = void function();
    alias da_al_get_clipping_rectangle = void function(int*,int*,int*,int*);

    alias da_al_create_sub_bitmap = ALLEGRO_BITMAP* function (ALLEGRO_BITMAP*,int,int,int,int);
    alias da_al_is_sub_bitmap = bool function(ALLEGRO_BITMAP*);
    alias da_al_get_parent_bitmap = ALLEGRO_BITMAP* function(ALLEGRO_BITMAP*);
    alias da_al_get_bitmap_x = int function(ALLEGRO_BITMAP*);
    alias da_al_get_bitmap_y = int function(ALLEGRO_BITMAP*);
    alias da_al_reparent_bitmap = void function(ALLEGRO_BITMAP*,ALLEGRO_BITMAP*,int,int,int,int);

    alias da_al_clone_bitmap = ALLEGRO_BITMAP* function(ALLEGRO_BITMAP*);
    alias da_al_convert_bitmap = void function(ALLEGRO_BITMAP*);
    alias da_al_convert_memory_bitmaps = void function();

    // bitmap_draw.h
    alias da_al_draw_bitmap = void function(ALLEGRO_BITMAP*,float,float,int);
    alias da_al_draw_bitmap_region = void function(ALLEGRO_BITMAP*,float,float,float,float,float,float,int);
    alias da_al_draw_scaled_bitmap = void function(ALLEGRO_BITMAP*,float,float,float,float,float,float,float,float,int);
    alias da_al_draw_rotated_bitmap = void function(ALLEGRO_BITMAP*,float,float,float,float,float,int);
    alias da_al_draw_scaled_rotated_bitmap = void function(ALLEGRO_BITMAP*,float,float,float,float,float,float,float,int);

    alias da_al_draw_tinted_bitmap = void function(ALLEGRO_BITMAP*,ALLEGRO_COLOR,float,float,int);
    alias da_al_draw_tinted_bitmap_region = void function(ALLEGRO_BITMAP*,ALLEGRO_COLOR,float,float,float,float,float,float,int);
    alias da_al_draw_tinted_scaled_bitmap = void function(ALLEGRO_BITMAP*,ALLEGRO_COLOR,float,float,float,float,float,float,float,float,int);
    alias da_al_draw_tinted_rotated_bitmap = void function(ALLEGRO_BITMAP*,ALLEGRO_COLOR,float,float,float,float,float,int);
    alias da_al_draw_tinted_scaled_rotated_bitmap = void function(ALLEGRO_BITMAP*,ALLEGRO_COLOR,float,float,float,float,float,float,float,int);
    alias da_al_draw_tinted_scaled_rotated_bitmap_region = void function(ALLEGRO_BITMAP*,float,float,float,float,ALLEGRO_COLOR,float,float,float,float,float,float,float,int);

    // bitmap_io.h
    alias da_al_register_bitmap_loader = bool function(const(char)*,ALLEGRO_IIO_LOADER_FUNCTION);
    alias da_al_register_bitmap_saver = bool function(const(char)*,ALLEGRO_IIO_SAVER_FUNCTION);
    alias da_al_register_bitmap_loader_f = bool function(const(char)*,ALLEGRO_IIO_FS_LOADER_FUNCTION);
    alias da_al_register_bitmap_saver_f = bool function(const(char)*,ALLEGRO_IIO_FS_SAVER_FUNCTION);
    alias da_al_register_bitmap_identifier = bool function(const(char)*, ALLEGRO_IIO_IDENTIFIER_FUNCTION);
    alias da_al_load_bitmap = ALLEGRO_BITMAP* function(const(char)*);
    alias da_al_load_bitmap_flags = ALLEGRO_BITMAP* function(const(char)*,int);
    alias da_al_load_bitmap_f = ALLEGRO_BITMAP* function(ALLEGRO_FILE*,const(char)*);
    alias da_al_load_bitmap_flags_f = ALLEGRO_BITMAP* function(ALLEGRO_FILE*,const(char)*,int);
    alias da_al_save_bitmap = bool function(const(char)*,ALLEGRO_BITMAP*);
    alias da_al_save_bitmap_f = bool function(ALLEGRO_FILE*,const(char)*,ALLEGRO_BITMAP*);
    alias da_al_identify_bitmap_f = const(char)* function(ALLEGRO_FILE*);
    alias da_al_identify_bitmap = const(char)* function(const(char)*);

    // bitmap_lock.h
    alias da_al_lock_bitmap = ALLEGRO_LOCKED_REGION* function(ALLEGRO_BITMAP*,int,int);
    alias da_al_lock_bitmap_region = ALLEGRO_LOCKED_REGION* function(ALLEGRO_BITMAP*,int,int,int,int,int,int);
    alias da_al_lock_bitmap_blocked = ALLEGRO_LOCKED_REGION* function(ALLEGRO_BITMAP*,int);
    alias da_al_lock_bitmap_region_blocked = ALLEGRO_LOCKED_REGION* function(ALLEGRO_BITMAP*,int,int,int,int,int);
    alias da_al_unlock_bitmap = void function(ALLEGRO_BITMAP*);
    alias da_al_is_bitmap_locked = bool function(ALLEGRO_BITMAP*);

    // blender.h
    alias da_al_set_blender = void function(int,int,int);
    alias da_al_set_blend_color = void function(ALLEGRO_COLOR);
    alias da_al_get_blender = void function(int*,int*,int*);
    alias da_al_get_blend_color = ALLEGRO_COLOR function();
    alias da_al_set_separate_blender = void function(int,int,int,int,int,int);
    alias da_al_get_separate_blender = void function(int*,int*,int*,int*,int*,int*);

    // clipboard.h
    alias da_al_get_clipboard_text = char* function(ALLEGRO_DISPLAY*);
    alias da_al_set_clipboard_text = bool function(ALLEGRO_DISPLAY*, const(char)*);
    alias da_al_clipboard_has_text = bool function(ALLEGRO_DISPLAY*);

    // color.h
    alias da_al_map_rgb = ALLEGRO_COLOR function(ubyte,ubyte,ubyte);
    alias da_al_map_rgba = ALLEGRO_COLOR function(ubyte,ubyte,ubyte,ubyte);
    alias da_al_map_rgb_f = ALLEGRO_COLOR function(float,float,float);
    alias da_al_map_rgba_f = ALLEGRO_COLOR function(float,float,float,float);
    alias da_al_premul_rgba = ALLEGRO_COLOR function(ubyte,ubyte,ubyte,ubyte);
    alias da_al_premul_rgba_f = ALLEGRO_COLOR function(float,float,float,float);

    alias da_al_unmap_rgb = void function(ALLEGRO_COLOR,ubyte*,ubyte*,ubyte*);
    alias da_al_unmap_rgba = void function(ALLEGRO_COLOR,ubyte*,ubyte*,ubyte*,ubyte*);
    alias da_al_unmap_rgb_f = void function(ALLEGRO_COLOR,float*,float*,float*);
    alias da_al_unmap_rgba_f = void function(ALLEGRO_COLOR,float*,float*,float*,float*);

    alias da_al_get_pixel_size = int function(int);
    alias da_al_get_pixel_format_bits = int function(int);
    alias da_al_get_pixel_block_size = int function(int);
    alias da_al_get_pixel_block_width = int function(int);
    alias da_al_get_pixel_block_height = int function(int);

    // config.h
    alias da_al_create_config = ALLEGRO_CONFIG* function();
    alias da_al_add_config_section = void function(ALLEGRO_CONFIG*,const(char)*);
    alias da_al_set_config_value = void function(ALLEGRO_CONFIG*,const(char)*,const(char)*,const(char)*);
    alias da_al_add_config_comment = void function(ALLEGRO_CONFIG*,const(char)*,const(char)*);
    alias da_al_get_config_value = const(char)* function(const(ALLEGRO_CONFIG)*,const(char)*,const(char)*);
    alias da_al_load_config_file = ALLEGRO_CONFIG* function(const(char)*);
    alias da_al_load_config_file_f = ALLEGRO_CONFIG* function(ALLEGRO_FILE*);
    alias da_al_save_config_file = bool function(const(char)*,const(ALLEGRO_CONFIG)*);
    alias da_al_save_config_file_f = bool function(ALLEGRO_FILE*,const(ALLEGRO_CONFIG)*);
    alias da_al_merge_config_into = void function(ALLEGRO_CONFIG*,const(ALLEGRO_CONFIG)*);
    alias da_al_merge_config = ALLEGRO_CONFIG* function(const(ALLEGRO_CONFIG)*,const(ALLEGRO_CONFIG)*);
    alias da_al_destroy_config = void function(ALLEGRO_CONFIG*);
    alias da_al_remove_config_section = bool function(ALLEGRO_CONFIG*,const(char)*,const(char)*);
    alias da_al_remove_config_key = bool function(ALLEGRO_CONFIG*,const(char)*,const(char)*);

    alias da_al_get_first_config_section = const(char)* function(const(ALLEGRO_CONFIG)*,ALLEGRO_CONFIG_SECTION**);
    alias da_al_get_next_config_section = const(char)* function(ALLEGRO_CONFIG_SECTION**);
    alias da_al_get_first_config_entry = const(char)* function(const(ALLEGRO_CONFIG)*,const(char)*,ALLEGRO_CONFIG_ENTRY**);
    alias da_al_get_next_config_entry = const(char)* function(ALLEGRO_CONFIG_ENTRY**);

    // cpu.h
    alias da_al_get_cpu_count = int function();
    alias da_al_get_ram_size = int function();

    // display.h
    alias da_al_set_new_display_refresh_rate = void function(int);
    alias da_al_set_new_display_flags = void function(int);
    alias da_al_get_new_display_refresh_rate = int function();
    alias da_al_get_new_display_flags = int function();

    alias da_al_get_display_width = int function(ALLEGRO_DISPLAY*);
    alias da_al_get_display_height = int function(ALLEGRO_DISPLAY*);
    alias da_al_get_display_format = int function(ALLEGRO_DISPLAY*);
    alias da_al_get_display_refresh_rate = int function(ALLEGRO_DISPLAY*);
    alias da_al_get_display_flags = int function(ALLEGRO_DISPLAY*);
    alias da_al_get_display_orientation = int function(ALLEGRO_DISPLAY*);
    alias da_al_set_display_flag = bool function(ALLEGRO_DISPLAY*,int,bool);

    alias da_al_create_display = ALLEGRO_DISPLAY* function(int,int);
    alias da_al_destroy_display = void function(ALLEGRO_DISPLAY*);
    alias da_al_get_current_display = ALLEGRO_DISPLAY* function();
    alias da_al_set_target_bitmap = void function(ALLEGRO_BITMAP*);
    alias da_al_set_target_backbuffer = void function(ALLEGRO_DISPLAY*);
    alias da_al_get_backbuffer = ALLEGRO_BITMAP* function(ALLEGRO_DISPLAY*);
    alias da_al_get_target_bitmap = ALLEGRO_BITMAP* function();

    alias da_al_acknowledge_resize = bool function(ALLEGRO_DISPLAY*);
    alias da_al_resize_display = bool function(ALLEGRO_DISPLAY*);
    alias da_al_flip_display = void function();
    alias da_al_update_display_region = void function(int,int,int,int);
    alias da_al_is_compatible_bitmap = bool function(ALLEGRO_BITMAP*);

    alias da_al_wait_for_vsync = bool function();

    alias da_al_get_display_event_source = ALLEGRO_EVENT_SOURCE* function(ALLEGRO_DISPLAY*);

    alias da_al_set_display_icon = void function(ALLEGRO_DISPLAY*,ALLEGRO_BITMAP*);
    alias da_al_set_display_icons = void function(ALLEGRO_DISPLAY*,int,ALLEGRO_BITMAP**);

    alias da_al_get_new_display_adapter = int function();
    alias da_al_set_new_display_adapter = void function(int);
    alias da_al_set_new_window_position = void function(int,int);
    alias da_al_get_new_window_position = void function(int*,int*);
    alias da_al_set_window_position = void function(ALLEGRO_DISPLAY*,int,int);
    alias da_al_get_window_position = void function(ALLEGRO_DISPLAY*,int*,int*);
    alias da_al_set_window_constraints = bool function(ALLEGRO_DISPLAY*,int,int,int,int);
    alias da_al_get_window_constraints = bool function(ALLEGRO_DISPLAY*,int*,int*,int*,int*);

    alias da_al_set_window_title = void function(ALLEGRO_DISPLAY*,const(char)*);

    alias da_al_set_new_display_option = void function(int,int,int);
    alias da_al_get_new_display_option = int function(int,int*);
    alias da_al_reset_new_display_options = void function();
    alias da_al_set_display_option = void function(ALLEGRO_DISPLAY*,int,int);
    alias da_al_get_display_option = int function(ALLEGRO_DISPLAY*,int);

    alias da_al_hold_bitmap_drawing = void function(bool);
    alias da_al_is_bitmap_drawing_held = bool function();

    alias da_al_acknowledge_drawing_halt = void function(ALLEGRO_DISPLAY*);
    alias da_al_acknowledge_drawing_resume = void function(ALLEGRO_DISPLAY*);

    // drawing.h
    alias da_al_clear_to_color = void function(ALLEGRO_COLOR);
    alias da_al_clear_depth_buffer = void function(float);
    alias da_al_draw_pixel = void function(float,float,ALLEGRO_COLOR);

    // error.h
    alias da_al_get_errno = int function();
    alias da_al_set_errno = void function(int);

    // events.h
    alias da_al_init_user_event_source = void function(ALLEGRO_EVENT_SOURCE*);
    alias da_al_destroy_user_event_source = void function(ALLEGRO_EVENT_SOURCE*);
    alias da_al_emit_user_event = bool function(ALLEGRO_EVENT_SOURCE*,ALLEGRO_EVENT*,void function(ALLEGRO_USER_EVENT*));
    alias da_al_unref_user_event = void function(ALLEGRO_USER_EVENT*);
    alias da_al_set_event_source_data = void function(ALLEGRO_EVENT_SOURCE*,intptr_t);
    alias da_al_get_event_source_data = intptr_t function(const(ALLEGRO_EVENT_SOURCE*));

    alias da_al_create_event_queue = ALLEGRO_EVENT_QUEUE* function();
    alias da_al_destroy_event_queue = void function(ALLEGRO_EVENT_QUEUE*);
    alias da_al_is_event_source_registered = bool function(ALLEGRO_EVENT_QUEUE*,ALLEGRO_EVENT_SOURCE*);
    alias da_al_register_event_source = void function(ALLEGRO_EVENT_QUEUE*,ALLEGRO_EVENT_SOURCE*);
    alias da_al_unregister_event_source = void function(ALLEGRO_EVENT_QUEUE*,ALLEGRO_EVENT_SOURCE*);
    alias da_al_pause_event_queue = void function(ALLEGRO_EVENT_QUEUE*);
    alias da_al_is_event_queue_empty = bool function(ALLEGRO_EVENT_QUEUE*);
    alias da_al_get_next_event = bool function(ALLEGRO_EVENT_QUEUE*,ALLEGRO_EVENT*);
    alias da_al_peek_next_event = bool function(ALLEGRO_EVENT_QUEUE*,ALLEGRO_EVENT*);
    alias da_al_drop_next_event = bool function(ALLEGRO_EVENT_QUEUE*);
    alias da_al_flush_event_queue = void function(ALLEGRO_EVENT_QUEUE*);
    alias da_al_wait_for_event = void function(ALLEGRO_EVENT_QUEUE*,ALLEGRO_EVENT*);
    alias da_al_wait_for_event_timed = bool function(ALLEGRO_EVENT_QUEUE*,ALLEGRO_EVENT*,float);
    alias da_al_wait_for_event_until = bool function(ALLEGRO_EVENT_QUEUE*,ALLEGRO_EVENT*,ALLEGRO_TIMEOUT*);

    // file.h
    alias da_al_fopen = ALLEGRO_FILE* function(const(char)*,const(char)*);
    alias da_al_fopen_interface = ALLEGRO_FILE* function(const(ALLEGRO_FILE_INTERFACE)*,const(char)*,const(char)*);
    alias da_al_create_file_handle = ALLEGRO_FILE* function(const(ALLEGRO_FILE_INTERFACE)*,void*);
    alias da_al_fclose = void function(ALLEGRO_FILE*);
    alias da_al_fread = size_t function(ALLEGRO_FILE*,void*,size_t);
    alias da_al_fwrite = size_t function(ALLEGRO_FILE*,const(void)*,size_t);
    alias da_al_fflush = bool function(ALLEGRO_FILE*);
    alias da_al_ftell = long function(ALLEGRO_FILE*);
    alias da_al_fseek = bool function(ALLEGRO_FILE*,long,int);
    alias da_al_feof = bool function(ALLEGRO_FILE*);
    alias da_al_ferror = bool function(ALLEGRO_FILE*);
    alias da_al_ferrmsg = const(char)* function(ALLEGRO_FILE*);
    alias da_al_fclearerr = void function(ALLEGRO_FILE*);
    alias da_al_fungetc = int function(ALLEGRO_FILE*,int);
    alias da_al_fsize = long function(ALLEGRO_FILE*);

    alias da_al_fgetc = int function(ALLEGRO_FILE*);
    alias da_al_fputc = int function(ALLEGRO_FILE*,int);
    alias da_al_fread16le = short function(ALLEGRO_FILE*);
    alias da_al_fread16be = short function(ALLEGRO_FILE*);
    alias da_al_fwrite16le = size_t function(ALLEGRO_FILE*,short);
    alias da_al_fwrite16be = size_t function(ALLEGRO_FILE*,short);
    alias da_al_fread32le = int function(ALLEGRO_FILE*);
    alias da_al_fread32be = int function(ALLEGRO_FILE*);
    alias da_al_fwrite32le = size_t function(ALLEGRO_FILE*,int);
    alias da_al_fwrite32be = size_t function(ALLEGRO_FILE*,int);
    alias da_al_fgets = char* function(ALLEGRO_FILE*);
    alias da_al_fget_ustr = ALLEGRO_USTR* function(ALLEGRO_FILE*);
    alias da_al_fputs = int function(ALLEGRO_FILE*,const(char)*);
    alias da_al_fprintf = int function(ALLEGRO_FILE*,const(char)*,...);
    alias da_al_vfprintf = int function(ALLEGRO_FILE*,const(char)*,va_list);

    alias da_al_fopen_fd = ALLEGRO_FILE* function(int,const(char)*);
    alias da_al_make_temp_file = ALLEGRO_FILE* function(const(char)*,ALLEGRO_PATH**);

    alias da_al_fopen_slice = ALLEGRO_FILE* function(ALLEGRO_FILE*,size_t,const(char)*);

    alias da_al_get_new_file_interface = const(ALLEGRO_FILE_INTERFACE)* function();
    alias da_al_set_new_file_interface = void function(const(ALLEGRO_FILE_INTERFACE)*);
    alias da_al_set_standard_file_interface = void function();

    alias da_al_get_file_userdata = void* function(ALLEGRO_FILE*);

    // fshook.h
    alias da_al_create_fs_entry = ALLEGRO_FS_ENTRY* function(const(char*));
    alias da_al_destroy_fs_entry = void function(ALLEGRO_FS_ENTRY*);
    alias da_al_get_fs_entry_name = const(char)* function(ALLEGRO_FS_ENTRY*);
    alias da_al_update_fs_entry = bool function(ALLEGRO_FS_ENTRY*);
    alias da_al_get_fs_entry_mode = uint function(ALLEGRO_FS_ENTRY*);
    alias da_al_get_fs_entry_atime = time_t function(ALLEGRO_FS_ENTRY*);
    alias da_al_get_fs_entry_mtime = time_t function(ALLEGRO_FS_ENTRY*);
    alias da_al_get_fs_entry_ctime = time_t function(ALLEGRO_FS_ENTRY*);
    alias da_al_get_fs_entry_size = off_t function(ALLEGRO_FS_ENTRY*);
    alias da_al_fs_entry_exists = bool function(ALLEGRO_FS_ENTRY*);
    alias da_al_remove_fs_entry = bool function(ALLEGRO_FS_ENTRY*);

    alias da_al_open_directory = bool function(ALLEGRO_FS_ENTRY*);
    alias da_al_read_directory = ALLEGRO_FS_ENTRY* function(ALLEGRO_FS_ENTRY*);
    alias da_al_close_directory = bool function(ALLEGRO_FS_ENTRY*);

    alias da_al_filename_exists = bool function(const(char)*);
    alias da_al_remove_filename = bool function(const(char)*);
    alias da_al_get_current_directory = char* function();
    alias da_al_change_directory = bool function(const(char)*);
    alias da_al_make_directory = bool function(const(char)*);

    alias da_al_open_fs_entry = ALLEGRO_FILE* function(ALLEGRO_FS_ENTRY*,const(char)*);

    alias da_al_for_each_fs_entry = int function(ALLEGRO_FS_ENTRY*,foreachCallback,void*);

    alias da_al_get_fs_interface = const(ALLEGRO_FS_INTERFACE)* function();
    alias da_al_set_fs_interface = void function(const(ALLEGRO_FS_INTERFACE)*);
    alias da_al_set_standard_fs_interface = void function();

    // fullscreen_mode.h
    alias da_al_get_num_display_modes = int function();
    alias da_al_get_display_mode = ALLEGRO_DISPLAY_MODE* function(int,ALLEGRO_DISPLAY_MODE*);

    // joystick.h
    alias da_al_install_joystick = bool function();
    alias da_al_uninstall_joystick = void function();
    alias da_al_is_joystick_installed = bool function();
    alias da_al_reconfigure_joysticks = bool function();

    alias da_al_get_num_joysticks = int function();
    alias da_al_get_joystick = ALLEGRO_JOYSTICK* function(int);
    alias da_al_release_joystick = void function(ALLEGRO_JOYSTICK*);
    alias da_al_get_joystick_active = bool function(ALLEGRO_JOYSTICK*);
    alias da_al_get_joystick_name = const(char)* function(ALLEGRO_JOYSTICK*);

    alias da_al_get_joystick_num_sticks = int function(ALLEGRO_JOYSTICK*);
    alias da_al_get_joystick_stick_flags = int function(ALLEGRO_JOYSTICK*,int);
    alias da_al_get_joystick_stick_name = const(char)* function(ALLEGRO_JOYSTICK*,int);

    alias da_al_get_joystick_num_axes = int function(ALLEGRO_JOYSTICK*);
    alias da_al_get_joystick_axis_name = const(char)* function(ALLEGRO_JOYSTICK*,int,int);

    alias da_al_get_joystick_num_buttons = int function(ALLEGRO_JOYSTICK*);
    alias da_al_get_joystick_button_name = const(char)* function(ALLEGRO_JOYSTICK*,int);

    alias da_al_get_joystick_state = void function(ALLEGRO_JOYSTICK*,ALLEGRO_JOYSTICK_STATE*);

    alias da_al_get_joystick_event_source = ALLEGRO_EVENT_SOURCE* function();

    // keyboard.h
    alias da_al_is_keyboard_installed = bool function();
    alias da_al_install_keyboard = bool function();
    alias da_al_uninstall_keyboard = void function();

    alias da_al_set_keyboard_leds = bool function(int);

    alias da_al_keycode_to_name = const(char)* function(int);

    alias da_al_get_keyboard_state = void function(ALLEGRO_KEYBOARD_STATE*);
    alias da_al_key_down = bool function(const(ALLEGRO_KEYBOARD_STATE)*,int);

    alias da_al_get_keyboard_event_source = ALLEGRO_EVENT_SOURCE* function();

    // memory.h
    alias da_al_malloc_with_context = void* function(size_t,int,const(char)*,const(char)*);
    alias da_al_free_with_context = void function(void*,int,const(char)*,const(char)*);
    alias da_al_realloc_with_context = void* function(void*,size_t,int,const(char)*,const(char)*);
    alias da_al_calloc_with_context = void* function(size_t,size_t,int,const(char)*,const(char)*);

    // monitor.h
    alias da_al_get_num_video_adapters = int function();
    alias da_al_get_monitor_info = bool function(int,ALLEGRO_MONITOR_INFO*);

    // mouse.h
    alias da_al_is_mouse_installed = bool function();
    alias da_al_install_mouse = bool function();
    alias da_al_uninstall_mouse = void function();
    alias da_al_get_mouse_num_buttons = uint function();
    alias da_al_get_mouse_num_axes = uint function();
    alias da_al_set_mouse_xy = bool function(ALLEGRO_DISPLAY*,int,int);
    alias da_al_set_mouse_z = bool function(int);
    alias da_al_set_mouse_w = bool function(int);
    alias da_al_set_mouse_axis = bool function(int,int);
    alias da_al_get_mouse_state = void function(ALLEGRO_MOUSE_STATE*);
    alias da_al_mouse_button_down = bool function(const(ALLEGRO_MOUSE_STATE)*,int);
    alias da_al_get_mouse_state_axis = int function(const(ALLEGRO_MOUSE_STATE)*,int);
    alias da_al_get_mouse_cursor_position = bool function(int*,int*);
    alias da_al_grab_mouse = bool function(ALLEGRO_DISPLAY*);
    alias da_al_ungrab_mouse = bool function();
    alias da_al_set_mouse_wheel_precision = void function(int);
    alias da_al_get_mouse_wheel_precision = int function();

    alias da_al_get_mouse_event_source = ALLEGRO_EVENT_SOURCE* function();

    // mouse_cursor.h
    alias da_al_create_mouse_cursor = ALLEGRO_MOUSE_CURSOR* function(ALLEGRO_BITMAP*,int,int);
    alias da_al_destroy_mouse_cursor = void function(ALLEGRO_MOUSE_CURSOR*);
    alias da_al_set_mouse_cursor = bool function(ALLEGRO_DISPLAY*,ALLEGRO_MOUSE_CURSOR*);
    alias da_al_set_system_mouse_cursor = bool function(ALLEGRO_DISPLAY*,ALLEGRO_SYSTEM_MOUSE_CURSOR);
    alias da_al_show_mouse_cursor = bool function(ALLEGRO_DISPLAY*);
    alias da_al_hide_mouse_cursor = bool function(ALLEGRO_DISPLAY*);

    // path.h
    alias da_al_create_path = ALLEGRO_PATH* function(const(char)*);
    alias da_al_create_path_for_directory = ALLEGRO_PATH* function(const(char)*);
    alias da_al_clone_path = ALLEGRO_PATH* function(const(ALLEGRO_PATH)*);

    alias da_al_get_path_num_components = int function(const(ALLEGRO_PATH)*);
    alias da_al_get_path_component = const(char)* function(const(ALLEGRO_PATH)*,int);
    alias da_al_replace_path_component = void function(ALLEGRO_PATH*,int,const(char)*);
    alias da_al_remove_path_component = void function(ALLEGRO_PATH*,int);
    alias da_al_insert_path_component = void function(ALLEGRO_PATH*,int,const(char)*);
    alias da_al_get_path_tail = const(char)* function(const(ALLEGRO_PATH)*);
    alias da_al_drop_path_tail = void function(ALLEGRO_PATH*);
    alias da_al_append_path_component = void function(ALLEGRO_PATH*,const(char)*);
    alias da_al_join_paths = bool function(ALLEGRO_PATH*,const(ALLEGRO_PATH)*);
    alias da_al_rebase_path = bool function(const(ALLEGRO_PATH)*,ALLEGRO_PATH*);
    alias da_al_path_cstr = const(char)* function(const(ALLEGRO_PATH)*,char);
    alias da_al_destroy_path = void function(ALLEGRO_PATH*);

    alias da_al_set_path_drive = void function(ALLEGRO_PATH*,const(char)*);
    alias da_al_get_path_drive = const(char)* function(const(ALLEGRO_PATH)*);

    alias da_al_set_path_filename = void function(ALLEGRO_PATH*,const(char)*);
    alias da_al_get_path_filename = const(char)* function(const(ALLEGRO_PATH)*);

    alias da_al_get_path_extension = const(char)* function(const(ALLEGRO_PATH)*);
    alias da_al_set_path_extension = bool function(ALLEGRO_PATH*,const(char)*);
    alias da_al_get_path_basename = const(char)* function(const(ALLEGRO_PATH)*);

    alias da_al_make_path_canonical = bool function(ALLEGRO_PATH*);

    // render_state.h
    alias da_al_set_render_state = void function(ALLEGRO_RENDER_STATE,int);

    // shader.h
    alias da_al_create_shader = ALLEGRO_SHADER* function(ALLEGRO_SHADER_PLATFORM);
    alias da_al_attach_shader_source = bool function(ALLEGRO_SHADER*,ALLEGRO_SHADER_TYPE,const(char)*);
    alias da_al_attach_shader_source_file = bool function(ALLEGRO_SHADER*,ALLEGRO_SHADER_TYPE,const(char)*);
    alias da_al_build_shader = bool function(ALLEGRO_SHADER*);
    alias da_al_get_shader_log = const(char)* function(ALLEGRO_SHADER*);
    alias da_al_get_shader_platform = ALLEGRO_SHADER_PLATFORM function(ALLEGRO_SHADER*);
    alias da_al_use_shader = bool function(ALLEGRO_SHADER*);
    alias da_al_destroy_shader = bool function(ALLEGRO_SHADER*);

    alias da_al_set_shader_sampler = bool function(const(char)*,ALLEGRO_BITMAP*,int);
    alias da_al_set_shader_matrix = bool function(const(char)*,ALLEGRO_TRANSFORM*);
    alias da_al_set_shader_int = bool function(const(char)*,int);
    alias da_al_set_shader_float = bool function(const(char)*,float);
    alias da_al_set_shader_int_vector = bool function(const(char)*,int,int*,int);
    alias da_al_set_shader_float_vector = bool function(const(char)*,int,float*,int);
    alias da_al_set_shader_bool = bool function(const(char)*,bool);

    alias da_al_get_default_shader_source = const(char)* function(ALLEGRO_SHADER_PLATFORM,ALLEGRO_SHADER_TYPE);

    // system.h
    alias da_al_install_system = bool function(int,int function(void function()));
    alias da_al_uninstall_system = void function();
    alias da_al_is_system_installed = bool function();
    alias da_al_get_system_driver = ALLEGRO_SYSTEM* function();
    alias da_al_get_system_config = ALLEGRO_CONFIG* function();

    alias da_al_get_standard_path = ALLEGRO_PATH* function(int);
    alias da_al_set_exe_name = void function(const(char)*);

    alias da_al_set_org_name = void function(const(char)*);
    alias da_al_set_app_name = void function(const(char)*);
    alias da_al_get_org_name = const(char)* function();
    alias da_al_get_app_name = const(char)* function();

    alias da_al_inhibit_screensaver = bool function(bool);

    // timer.h
    alias da_al_create_timer = ALLEGRO_TIMER* function(double);
    alias da_al_destroy_timer = void function(ALLEGRO_TIMER*);
    alias da_al_start_timer = void function(ALLEGRO_TIMER*);
    alias da_al_stop_timer = void function(ALLEGRO_TIMER*);
    alias da_al_resume_timer = void function(const(ALLEGRO_TIMER)*);
    alias da_al_get_timer_started = bool function(const(ALLEGRO_TIMER)*);
    alias da_al_get_timer_speed = double function(const(ALLEGRO_TIMER)*);
    alias da_al_set_timer_speed = void function(ALLEGRO_TIMER*,double);
    alias da_al_get_timer_count = long function(const(ALLEGRO_TIMER)*);
    alias da_al_set_timer_count = void function(ALLEGRO_TIMER*,long);
    alias da_al_add_timer_count = void function(ALLEGRO_TIMER*,long);
    alias da_al_get_timer_event_source = ALLEGRO_EVENT_SOURCE* function(ALLEGRO_TIMER*);

    // tls.h
    alias da_al_store_state = void function(ALLEGRO_STATE*,int);
    alias da_al_restore_state = void function(const(ALLEGRO_STATE)*);

    // touch_input.h
    alias da_al_is_touch_input_installed = bool function();
    alias da_al_install_touch_input = bool function();
    alias da_al_uninstall_touch_input = void function();
    alias da_al_get_touch_input_state = void function(ALLEGRO_TOUCH_INPUT_STATE*);
    alias da_al_get_touch_input_event_source = ALLEGRO_EVENT_SOURCE* function();

    // transformations.h
    alias da_al_use_transform = void function(const(ALLEGRO_TRANSFORM)*);
    alias da_al_use_projection_transform = void function(const(ALLEGRO_TRANSFORM)*);
    alias da_al_copy_transform = void function(ALLEGRO_TRANSFORM*,const(ALLEGRO_TRANSFORM)*);
    alias da_al_identity_transform = void function(ALLEGRO_TRANSFORM*);
    alias da_al_build_transform = void function(ALLEGRO_TRANSFORM*,float,float,float,float,float);
    alias da_al_build_camera_transform = void function(ALLEGRO_TRANSFORM*,float,float,float,float,float,float,float,float,float);
    alias da_al_translate_transform = void function(ALLEGRO_TRANSFORM*,float,float);
    alias da_al_translate_transform_3d = void function(ALLEGRO_TRANSFORM*,float,float,float);
    alias da_al_rotate_transform = void function(ALLEGRO_TRANSFORM*,float);
    alias da_al_rotate_transform_3d = void function(ALLEGRO_TRANSFORM*,float,float,float,float);
    alias da_al_scale_transform = void function(ALLEGRO_TRANSFORM*,float,float);
    alias da_al_scale_transform_3d = void function(ALLEGRO_TRANSFORM*,float,float,float);
    alias da_al_transform_coordinates = void function(const(ALLEGRO_TRANSFORM)*,float*,float*);
    alias da_al_transform_coordinates_3d = void function(const(ALLEGRO_TRANSFORM)*,float*,float*,float*);
    alias da_al_compose_transform = void function(ALLEGRO_TRANSFORM*,const(ALLEGRO_TRANSFORM)*);
    alias da_al_get_current_transform = const(ALLEGRO_TRANSFORM)* function();
    alias da_al_get_current_inverse_transform = const(ALLEGRO_TRANSFORM)* function();
    alias da_al_get_current_projection_transform = const(ALLEGRO_TRANSFORM)* function();
    alias da_al_invert_transform = void function(ALLEGRO_TRANSFORM*);
    alias da_al_check_inverse = int function(const(ALLEGRO_TRANSFORM)*,float);
    alias da_al_orthographic_transform = void function(ALLEGRO_TRANSFORM*,float,float,float,float,float,float);
    alias da_al_perspective_transform = void function(ALLEGRO_TRANSFORM*,float,float,float,float,float,float);
    alias da_al_horizontal_shear_transform = void function(ALLEGRO_TRANSFORM*,float);
    alias da_al_vertical_shear_transform = void function(ALLEGRO_TRANSFORM*,float);

    // utf8.h
    alias da_al_ustr_new = ALLEGRO_USTR* function(const(char)*);
    alias da_al_ustr_new_from_buffer = ALLEGRO_USTR* function(const(char)*,size_t);
    alias da_al_ustr_newf = ALLEGRO_USTR* function(const(char)*,...);
    alias da_al_ustr_free = void function(ALLEGRO_USTR*);
    alias da_al_cstr = const(char)* function(const(ALLEGRO_USTR)*);
    alias da_al_ustr_to_buffer = void function(const(ALLEGRO_USTR)*,char*,int);
    alias da_al_cstr_dup = char* function(const(ALLEGRO_USTR)*);
    alias da_al_ustr_dup = ALLEGRO_USTR* function(const(ALLEGRO_USTR)*);
    alias da_al_ustr_dup_substr = ALLEGRO_USTR* function(const(ALLEGRO_USTR)*,int,int);

    alias da_al_ustr_empty_string = ALLEGRO_USTR* function();

    alias da_al_ref_cstr = const(ALLEGRO_USTR)* function(ALLEGRO_USTR_INFO*,const(char)*);
    alias da_al_ref_buffer = const(ALLEGRO_USTR)* function(ALLEGRO_USTR_INFO*,const(char)*,size_t);
    alias da_al_ref_ustr = const(ALLEGRO_USTR)* function(ALLEGRO_USTR_INFO*,const(ALLEGRO_USTR)*,int,int);

    alias da_al_ustr_size = size_t function(const(ALLEGRO_USTR)*);
    alias da_al_ustr_length = size_t function(const(ALLEGRO_USTR)*);
    alias da_al_ustr_offset = int function(const(ALLEGRO_USTR)*,int);
    alias da_al_ustr_next = bool function(const(ALLEGRO_USTR)*,int*);
    alias da_al_ustr_prev = bool function(const(ALLEGRO_USTR)*,int*);

    alias da_al_ustr_get = int function(const(ALLEGRO_USTR)*,int);
    alias da_al_ustr_get_next = int function(const(ALLEGRO_USTR)*,int*);
    alias da_al_ustr_prev_get = int function(const(ALLEGRO_USTR)*,int*);

    alias da_al_ustr_insert = bool function(ALLEGRO_USTR*,int,const(ALLEGRO_USTR)*);
    alias da_al_ustr_insert_cstr = bool function(ALLEGRO_USTR*,int,const(char)*);
    alias da_al_ustr_insert_chr = size_t function(ALLEGRO_USTR*,int,int);

    alias da_al_ustr_append = bool function(ALLEGRO_USTR*,const(ALLEGRO_USTR)*);
    alias da_al_ustr_append_cstr = bool function(ALLEGRO_USTR*,const(char)*);
    alias da_al_ustr_append_chr = size_t function(ALLEGRO_USTR*,int);
    alias da_al_ustr_appendf = bool function(ALLEGRO_USTR*,const(char)*,...);
    alias da_al_ustr_vappendf = bool function(ALLEGRO_USTR*,const(char)*,va_list);

    alias da_al_ustr_remove_chr = bool function(ALLEGRO_USTR*,int);
    alias da_al_ustr_remove_range = bool function(ALLEGRO_USTR*,int,int);
    alias da_al_ustr_truncate = bool function(ALLEGRO_USTR*,int);
    alias da_al_ustr_ltrim_ws = bool function(ALLEGRO_USTR*);
    alias da_al_ustr_rtrim_ws = bool function(ALLEGRO_USTR*);
    alias da_al_ustr_trim_ws = bool function(ALLEGRO_USTR*);

    alias da_al_ustr_assign = bool function(ALLEGRO_USTR*,const(ALLEGRO_USTR)*);
    alias da_al_ustr_assign_substr = bool function(ALLEGRO_USTR*,const(ALLEGRO_USTR)*,int,int);
    alias da_al_ustr_assign_cstr = bool function(ALLEGRO_USTR*,const(char)*);

    alias da_al_ustr_set_chr = size_t function(ALLEGRO_USTR*,int,int);
    alias da_al_ustr_replace_range = bool function(ALLEGRO_USTR*,int,int,const(ALLEGRO_USTR)*);

    alias da_al_ustr_find_chr = int function(const(ALLEGRO_USTR)*,int,int);
    alias da_al_ustr_rfind_chr = int function(const(ALLEGRO_USTR)*,int,int);
    alias da_al_ustr_find_set = int function(const(ALLEGRO_USTR)*,int,const(ALLEGRO_USTR)*);
    alias da_al_ustr_find_set_cstr = int function(const(ALLEGRO_USTR)*,int,const(char)*);
    alias da_al_ustr_find_cset = int function(const(ALLEGRO_USTR)*,int,const(ALLEGRO_USTR)*);
    alias da_al_ustr_find_cset_cstr = int function(const(ALLEGRO_USTR)*,int,const(char)*);
    alias da_al_ustr_find_str = int function(const(ALLEGRO_USTR)*,int,const(ALLEGRO_USTR)*);
    alias da_al_ustr_find_cstr = int function(const(ALLEGRO_USTR)*,int,const(char)*);
    alias da_al_ustr_rfind_str = int function(const(ALLEGRO_USTR)*,int,const(ALLEGRO_USTR)*);
    alias da_al_ustr_rfind_cstr = int function(const(ALLEGRO_USTR)*,int,const(char)*);
    alias da_al_ustr_find_replace = bool function(ALLEGRO_USTR*,int,const(ALLEGRO_USTR)*,const(ALLEGRO_USTR)*);
    alias da_al_ustr_find_replace_cstr = bool function(ALLEGRO_USTR*,int,const(char)*,const(char)*);

    alias da_al_ustr_equal = bool function(const(ALLEGRO_USTR)*,const(ALLEGRO_USTR)*);
    alias da_al_ustr_compare = int function(const(ALLEGRO_USTR)*,const(ALLEGRO_USTR)*);
    alias da_al_ustr_ncompare = int function(const(ALLEGRO_USTR)*,const(ALLEGRO_USTR)*);
    alias da_al_ustr_has_prefix = bool function(const(ALLEGRO_USTR)*,const(ALLEGRO_USTR)*);
    alias da_al_ustr_has_prefix_cstr = bool function(const(ALLEGRO_USTR)*,const(char)*);
    alias da_al_ustr_has_suffix = bool function(const(ALLEGRO_USTR)*,const(ALLEGRO_USTR)*);
    alias da_al_ustr_has_suffix_cstr = bool function(const(ALLEGRO_USTR)*,const(char)*);

    alias da_al_utf8_width = size_t function(int);
    alias da_al_utf8_encode = size_t function(char*,int);

    alias da_al_ustr_new_from_utf16 = ALLEGRO_USTR* function(const(ushort)*);
    alias da_al_ustr_size_utf16 = size_t function(const(ALLEGRO_USTR)*);
    alias da_al_ustr_encode_utf16 = size_t function(const(ALLEGRO_USTR)*,ushort*,size_t);
    alias da_al_utf16_width = size_t function(int);
    alias da_al_utf16_encode = size_t function(ushort*,int);
}

__gshared {
    da_al_get_time al_get_time;
    da_al_rest al_rest;
    da_al_init_timeout al_init_timeout;
    da_al_get_allegro_version al_get_allegro_version;
    da_al_run_main al_run_main;
    da_al_set_new_bitmap_format al_set_new_bitmap_format;
    da_al_set_new_bitmap_flags al_set_new_bitmap_flags;
    da_al_get_new_bitmap_format al_get_new_bitmap_format;
    da_al_get_new_bitmap_flags al_get_new_bitmap_flags;
    da_al_add_new_bitmap_flag al_add_new_bitmap_flag;
    da_al_get_bitmap_width al_get_bitmap_width;
    da_al_get_bitmap_height al_get_bitmap_height;
    da_al_get_bitmap_format al_get_bitmap_format;
    da_al_get_bitmap_flags al_get_bitmap_flags;
    da_al_create_bitmap al_create_bitmap;
    da_al_destroy_bitmap al_destroy_bitmap;
    da_al_put_pixel al_put_pixel;
    da_al_put_blended_pixel al_put_blended_pixel;
    da_al_get_pixel al_get_pixel;
    da_al_convert_mask_to_alpha al_convert_mask_to_alpha;
    da_al_set_clipping_rectangle al_set_clipping_rectangle;
    da_al_reset_clipping_rectangle al_reset_clipping_rectangle;
    da_al_get_clipping_rectangle al_get_clipping_rectangle;
    da_al_create_sub_bitmap al_create_sub_bitmap;
    da_al_is_sub_bitmap al_is_sub_bitmap;
    da_al_get_parent_bitmap al_get_parent_bitmap;
    da_al_get_bitmap_x al_get_bitmap_x;
    da_al_get_bitmap_y al_get_bitmap_y;
    da_al_reparent_bitmap al_reparent_bitmap;
    da_al_clone_bitmap al_clone_bitmap;
    da_al_convert_bitmap al_convert_bitmap;
    da_al_convert_memory_bitmaps al_convert_memory_bitmaps;
    da_al_draw_bitmap al_draw_bitmap;
    da_al_draw_bitmap_region al_draw_bitmap_region;
    da_al_draw_scaled_bitmap al_draw_scaled_bitmap;
    da_al_draw_rotated_bitmap al_draw_rotated_bitmap;
    da_al_draw_scaled_rotated_bitmap al_draw_scaled_rotated_bitmap;
    da_al_draw_tinted_bitmap al_draw_tinted_bitmap;
    da_al_draw_tinted_bitmap_region al_draw_tinted_bitmap_region;
    da_al_draw_tinted_scaled_bitmap al_draw_tinted_scaled_bitmap;
    da_al_draw_tinted_rotated_bitmap al_draw_tinted_rotated_bitmap;
    da_al_draw_tinted_scaled_rotated_bitmap al_draw_tinted_scaled_rotated_bitmap;
    da_al_draw_tinted_scaled_rotated_bitmap_region al_draw_tinted_scaled_rotated_bitmap_region;
    da_al_register_bitmap_loader al_register_bitmap_loader;
    da_al_register_bitmap_saver al_register_bitmap_saver;
    da_al_register_bitmap_loader_f al_register_bitmap_loader_f;
    da_al_register_bitmap_saver_f al_register_bitmap_saver_f;
    da_al_register_bitmap_identifier al_register_bitmap_identifier;
    da_al_load_bitmap al_load_bitmap;
    da_al_load_bitmap_flags al_load_bitmap_flags;
    da_al_load_bitmap_f al_load_bitmap_f;
    da_al_load_bitmap_flags_f al_load_bitmap_flags_f;
    da_al_save_bitmap al_save_bitmap;
    da_al_save_bitmap_f al_save_bitmap_f;
    da_al_identify_bitmap_f al_identify_bitmap_f;
    da_al_identify_bitmap al_identify_bitmap;
    da_al_lock_bitmap al_lock_bitmap;
    da_al_lock_bitmap_region al_lock_bitmap_region;
    da_al_lock_bitmap_blocked al_lock_bitmap_blocked;
    da_al_lock_bitmap_region_blocked al_lock_bitmap_region_blocked;
    da_al_unlock_bitmap al_unlock_bitmap;
    da_al_is_bitmap_locked al_is_bitmap_locked;
    da_al_set_blender al_set_blender;
    da_al_set_blend_color al_set_blend_color;
    da_al_get_blender al_get_blender;
    da_al_get_blend_color al_get_blend_color;
    da_al_set_separate_blender al_set_separate_blender;
    da_al_get_separate_blender al_get_separate_blender;
    da_al_get_clipboard_text al_get_clipboard_text;
    da_al_set_clipboard_text al_set_clipboard_text;
    da_al_clipboard_has_text al_clipboard_has_text;
    da_al_map_rgb al_map_rgb;
    da_al_map_rgba al_map_rgba;
    da_al_map_rgb_f al_map_rgb_f;
    da_al_map_rgba_f al_map_rgba_f;
    da_al_premul_rgba al_premul_rgba;
    da_al_premul_rgba_f al_premul_rgba_f;
    da_al_unmap_rgb al_unmap_rgb;
    da_al_unmap_rgba al_unmap_rgba;
    da_al_unmap_rgb_f al_unmap_rgb_f;
    da_al_unmap_rgba_f al_unmap_rgba_f;
    da_al_get_pixel_size al_get_pixel_size;
    da_al_get_pixel_format_bits al_get_pixel_format_bits;
    da_al_get_pixel_block_size al_get_pixel_block_size;
    da_al_get_pixel_block_width al_get_pixel_block_width;
    da_al_get_pixel_block_height al_get_pixel_block_height;
    da_al_create_config al_create_config;
    da_al_add_config_section al_add_config_section;
    da_al_set_config_value al_set_config_value;
    da_al_add_config_comment al_add_config_comment;
    da_al_get_config_value al_get_config_value;
    da_al_load_config_file al_load_config_file;
    da_al_load_config_file_f al_load_config_file_f;
    da_al_save_config_file al_save_config_file;
    da_al_save_config_file_f al_save_config_file_f;
    da_al_merge_config_into al_merge_config_into;
    da_al_merge_config al_merge_config;
    da_al_destroy_config al_destroy_config;
    da_al_remove_config_section al_remove_config_section;
    da_al_remove_config_key al_remove_config_key;
    da_al_get_first_config_section al_get_first_config_section;
    da_al_get_next_config_section al_get_next_config_section;
    da_al_get_first_config_entry al_get_first_config_entry;
    da_al_get_next_config_entry al_get_next_config_entry;
    da_al_get_cpu_count al_get_cpu_count;
    da_al_get_ram_size al_get_ram_size;
    da_al_set_new_display_refresh_rate al_set_new_display_refresh_rate;
    da_al_set_new_display_flags al_set_new_display_flags;
    da_al_get_new_display_refresh_rate al_get_new_display_refresh_rate;
    da_al_get_new_display_flags al_get_new_display_flags;
    da_al_get_display_width al_get_display_width;
    da_al_get_display_height al_get_display_height;
    da_al_get_display_format al_get_display_format;
    da_al_get_display_refresh_rate al_get_display_refresh_rate;
    da_al_get_display_flags al_get_display_flags;
    da_al_get_display_orientation al_get_display_orientation;
    da_al_set_display_flag al_set_display_flag;
    da_al_create_display al_create_display;
    da_al_destroy_display al_destroy_display;
    da_al_get_current_display al_get_current_display;
    da_al_set_target_bitmap al_set_target_bitmap;
    da_al_set_target_backbuffer al_set_target_backbuffer;
    da_al_get_backbuffer al_get_backbuffer;
    da_al_get_target_bitmap al_get_target_bitmap;
    da_al_acknowledge_resize al_acknowledge_resize;
    da_al_resize_display al_resize_display;
    da_al_flip_display al_flip_display;
    da_al_update_display_region al_update_display_region;
    da_al_is_compatible_bitmap al_is_compatible_bitmap;
    da_al_wait_for_vsync al_wait_for_vsync;
    da_al_get_display_event_source al_get_display_event_source;
    da_al_set_display_icon al_set_display_icon;
    da_al_set_display_icons al_set_display_icons;
    da_al_get_new_display_adapter al_get_new_display_adapter;
    da_al_set_new_display_adapter al_set_new_display_adapter;
    da_al_set_new_window_position al_set_new_window_position;
    da_al_get_new_window_position al_get_new_window_position;
    da_al_set_window_position al_set_window_position;
    da_al_get_window_position al_get_window_position;
    da_al_set_window_constraints al_set_window_constraints;
    da_al_get_window_constraints al_get_window_constraints;
    da_al_set_window_title al_set_window_title;
    da_al_set_new_display_option al_set_new_display_option;
    da_al_get_new_display_option al_get_new_display_option;
    da_al_reset_new_display_options al_reset_new_display_options;
    da_al_set_display_option al_set_display_option;
    da_al_get_display_option al_get_display_option;
    da_al_hold_bitmap_drawing al_hold_bitmap_drawing;
    da_al_is_bitmap_drawing_held al_is_bitmap_drawing_held;
    da_al_acknowledge_drawing_halt al_acknowledge_drawing_halt;
    da_al_acknowledge_drawing_resume al_acknowledge_drawing_resume;
    da_al_clear_to_color al_clear_to_color;
    da_al_clear_depth_buffer al_clear_depth_buffer;
    da_al_draw_pixel al_draw_pixel;
    da_al_get_errno al_get_errno;
    da_al_set_errno al_set_errno;
    da_al_init_user_event_source al_init_user_event_source;
    da_al_destroy_user_event_source al_destroy_user_event_source;
    da_al_emit_user_event al_emit_user_event;
    da_al_unref_user_event al_unref_user_event;
    da_al_set_event_source_data al_set_event_source_data;
    da_al_get_event_source_data al_get_event_source_data;
    da_al_create_event_queue al_create_event_queue;
    da_al_destroy_event_queue al_destroy_event_queue;
    da_al_is_event_source_registered al_is_event_source_registered;
    da_al_register_event_source al_register_event_source;
    da_al_unregister_event_source al_unregister_event_source;
    da_al_pause_event_queue al_pause_event_queue;
    da_al_is_event_queue_empty al_is_event_queue_empty;
    da_al_get_next_event al_get_next_event;
    da_al_peek_next_event al_peek_next_event;
    da_al_drop_next_event al_drop_next_event;
    da_al_flush_event_queue al_flush_event_queue;
    da_al_wait_for_event al_wait_for_event;
    da_al_wait_for_event_timed al_wait_for_event_timed;
    da_al_wait_for_event_until al_wait_for_event_until;
    da_al_fopen al_fopen;
    da_al_fopen_interface al_fopen_interface;
    da_al_create_file_handle al_create_file_handle;
    da_al_fclose al_fclose;
    da_al_fread al_fread;
    da_al_fwrite al_fwrite;
    da_al_fflush al_fflush;
    da_al_ftell al_ftell;
    da_al_fseek al_fseek;
    da_al_feof al_feof;
    da_al_ferror al_ferror;
    da_al_ferrmsg al_ferrmsg;
    da_al_fclearerr al_fclearerr;
    da_al_fungetc al_fungetc;
    da_al_fsize al_fsize;
    da_al_fgetc al_fgetc;
    da_al_fputc al_fputc;
    da_al_fread16le al_fread16le;
    da_al_fread16be al_fread16be;
    da_al_fwrite16le al_fwrite16le;
    da_al_fwrite16be al_fwrite16be;
    da_al_fread32le al_fread32le;
    da_al_fread32be al_fread32be;
    da_al_fwrite32le al_fwrite32le;
    da_al_fwrite32be al_fwrite32be;
    da_al_fgets al_fgets;
    da_al_fget_ustr al_fget_ustr;
    da_al_fputs al_fputs;
    da_al_fprintf al_fprintf;
    da_al_vfprintf al_vfprintf;
    da_al_fopen_fd al_fopen_fd;
    da_al_make_temp_file al_make_temp_file;
    da_al_fopen_slice al_fopen_slice;
    da_al_get_new_file_interface al_get_new_file_interface;
    da_al_set_new_file_interface al_set_new_file_interface;
    da_al_set_standard_file_interface al_set_standard_file_interface;
    da_al_get_file_userdata al_get_file_userdata;
    da_al_create_fs_entry al_create_fs_entry;
    da_al_destroy_fs_entry al_destroy_fs_entry;
    da_al_get_fs_entry_name al_get_fs_entry_name;
    da_al_update_fs_entry al_update_fs_entry;
    da_al_get_fs_entry_mode al_get_fs_entry_mode;
    da_al_get_fs_entry_atime al_get_fs_entry_atime;
    da_al_get_fs_entry_mtime al_get_fs_entry_mtime;
    da_al_get_fs_entry_ctime al_get_fs_entry_ctime;
    da_al_get_fs_entry_size al_get_fs_entry_size;
    da_al_fs_entry_exists al_fs_entry_exists;
    da_al_remove_fs_entry al_remove_fs_entry;
    da_al_open_directory al_open_directory;
    da_al_read_directory al_read_directory;
    da_al_close_directory al_close_directory;
    da_al_filename_exists al_filename_exists;
    da_al_remove_filename al_remove_filename;
    da_al_get_current_directory al_get_current_directory;
    da_al_change_directory al_change_directory;
    da_al_make_directory al_make_directory;
    da_al_open_fs_entry al_open_fs_entry;
    da_al_for_each_fs_entry al_for_each_fs_entry;
    da_al_get_fs_interface al_get_fs_interface;
    da_al_set_fs_interface al_set_fs_interface;
    da_al_set_standard_fs_interface al_set_standard_fs_interface;
    da_al_get_num_display_modes al_get_num_display_modes;
    da_al_get_display_mode al_get_display_mode;
    da_al_install_joystick al_install_joystick;
    da_al_uninstall_joystick al_uninstall_joystick;
    da_al_is_joystick_installed al_is_joystick_installed;
    da_al_reconfigure_joysticks al_reconfigure_joysticks;
    da_al_get_num_joysticks al_get_num_joysticks;
    da_al_get_joystick al_get_joystick;
    da_al_release_joystick al_release_joystick;
    da_al_get_joystick_active al_get_joystick_active;
    da_al_get_joystick_name al_get_joystick_name;
    da_al_get_joystick_num_sticks al_get_joystick_num_sticks;
    da_al_get_joystick_stick_flags al_get_joystick_stick_flags;
    da_al_get_joystick_stick_name al_get_joystick_stick_name;
    da_al_get_joystick_num_axes al_get_joystick_num_axes;
    da_al_get_joystick_axis_name al_get_joystick_axis_name;
    da_al_get_joystick_num_buttons al_get_joystick_num_buttons;
    da_al_get_joystick_button_name al_get_joystick_button_name;
    da_al_get_joystick_state al_get_joystick_state;
    da_al_get_joystick_event_source al_get_joystick_event_source;
    da_al_is_keyboard_installed al_is_keyboard_installed;
    da_al_install_keyboard al_install_keyboard;
    da_al_uninstall_keyboard al_uninstall_keyboard;
    da_al_set_keyboard_leds al_set_keyboard_leds;
    da_al_keycode_to_name al_keycode_to_name;
    da_al_get_keyboard_state al_get_keyboard_state;
    da_al_key_down al_key_down;
    da_al_get_keyboard_event_source al_get_keyboard_event_source;
    da_al_malloc_with_context al_malloc_with_context;
    da_al_free_with_context al_free_with_context;
    da_al_realloc_with_context al_realloc_with_context;
    da_al_calloc_with_context al_calloc_with_context;
    da_al_get_num_video_adapters al_get_num_video_adapters;
    da_al_get_monitor_info al_get_monitor_info;
    da_al_is_mouse_installed al_is_mouse_installed;
    da_al_install_mouse al_install_mouse;
    da_al_uninstall_mouse al_uninstall_mouse;
    da_al_get_mouse_num_buttons al_get_mouse_num_buttons;
    da_al_get_mouse_num_axes al_get_mouse_num_axes;
    da_al_set_mouse_xy al_set_mouse_xy;
    da_al_set_mouse_z al_set_mouse_z;
    da_al_set_mouse_w al_set_mouse_w;
    da_al_set_mouse_axis al_set_mouse_axis;
    da_al_get_mouse_state al_get_mouse_state;
    da_al_mouse_button_down al_mouse_button_down;
    da_al_get_mouse_state_axis al_get_mouse_state_axis;
    da_al_get_mouse_cursor_position al_get_mouse_cursor_position;
    da_al_grab_mouse al_grab_mouse;
    da_al_ungrab_mouse al_ungrab_mouse;
    da_al_set_mouse_wheel_precision al_set_mouse_wheel_precision;
    da_al_get_mouse_wheel_precision al_get_mouse_wheel_precision;
    da_al_get_mouse_event_source al_get_mouse_event_source;
    da_al_create_mouse_cursor al_create_mouse_cursor;
    da_al_destroy_mouse_cursor al_destroy_mouse_cursor;
    da_al_set_mouse_cursor al_set_mouse_cursor;
    da_al_set_system_mouse_cursor al_set_system_mouse_cursor;
    da_al_show_mouse_cursor al_show_mouse_cursor;
    da_al_hide_mouse_cursor al_hide_mouse_cursor;
    da_al_create_path al_create_path;
    da_al_create_path_for_directory al_create_path_for_directory;
    da_al_clone_path al_clone_path;
    da_al_get_path_num_components al_get_path_num_components;
    da_al_get_path_component al_get_path_component;
    da_al_replace_path_component al_replace_path_component;
    da_al_remove_path_component al_remove_path_component;
    da_al_insert_path_component al_insert_path_component;
    da_al_get_path_tail al_get_path_tail;
    da_al_drop_path_tail al_drop_path_tail;
    da_al_append_path_component al_append_path_component;
    da_al_join_paths al_join_paths;
    da_al_rebase_path al_rebase_path;
    da_al_path_cstr al_path_cstr;
    da_al_destroy_path al_destroy_path;
    da_al_set_path_drive al_set_path_drive;
    da_al_get_path_drive al_get_path_drive;
    da_al_set_path_filename al_set_path_filename;
    da_al_get_path_filename al_get_path_filename;
    da_al_get_path_extension al_get_path_extension;
    da_al_set_path_extension al_set_path_extension;
    da_al_get_path_basename al_get_path_basename;
    da_al_make_path_canonical al_make_path_canonical;
    da_al_set_render_state al_set_render_state;
    da_al_create_shader al_create_shader;
    da_al_attach_shader_source al_attach_shader_source;
    da_al_attach_shader_source_file al_attach_shader_source_file;
    da_al_build_shader al_build_shader;
    da_al_get_shader_log al_get_shader_log;
    da_al_get_shader_platform al_get_shader_platform;
    da_al_use_shader al_use_shader;
    da_al_destroy_shader al_destroy_shader;
    da_al_set_shader_sampler al_set_shader_sampler;
    da_al_set_shader_matrix al_set_shader_matrix;
    da_al_set_shader_int al_set_shader_int;
    da_al_set_shader_float al_set_shader_float;
    da_al_set_shader_int_vector al_set_shader_int_vector;
    da_al_set_shader_float_vector al_set_shader_float_vector;
    da_al_set_shader_bool al_set_shader_bool;
    da_al_get_default_shader_source al_get_default_shader_source;
    da_al_install_system al_install_system;
    da_al_uninstall_system al_uninstall_system;
    da_al_is_system_installed al_is_system_installed;
    da_al_get_system_driver al_get_system_driver;
    da_al_get_system_config al_get_system_config;
    da_al_get_standard_path al_get_standard_path;
    da_al_set_exe_name al_set_exe_name;
    da_al_set_org_name al_set_org_name;
    da_al_set_app_name al_set_app_name;
    da_al_get_org_name al_get_org_name;
    da_al_get_app_name al_get_app_name;
    da_al_inhibit_screensaver al_inhibit_screensaver;
    da_al_create_timer al_create_timer;
    da_al_destroy_timer al_destroy_timer;
    da_al_start_timer al_start_timer;
    da_al_stop_timer al_stop_timer;
    da_al_resume_timer al_resume_timer;
    da_al_get_timer_started al_get_timer_started;
    da_al_get_timer_speed al_get_timer_speed;
    da_al_set_timer_speed al_set_timer_speed;
    da_al_get_timer_count al_get_timer_count;
    da_al_set_timer_count al_set_timer_count;
    da_al_add_timer_count al_add_timer_count;
    da_al_get_timer_event_source al_get_timer_event_source;
    da_al_store_state al_store_state;
    da_al_restore_state al_restore_state;
    da_al_is_touch_input_installed al_is_touch_input_installed;
    da_al_install_touch_input al_install_touch_input;
    da_al_uninstall_touch_input al_uninstall_touch_input;
    da_al_get_touch_input_state al_get_touch_input_state;
    da_al_get_touch_input_event_source al_get_touch_input_event_source;
    da_al_use_transform al_use_transform;
    da_al_use_projection_transform al_use_projection_transform;
    da_al_copy_transform al_copy_transform;
    da_al_identity_transform al_identity_transform;
    da_al_build_transform al_build_transform;
    da_al_build_camera_transform al_build_camera_transform;
    da_al_translate_transform al_translate_transform;
    da_al_translate_transform_3d al_translate_transform_3d;
    da_al_rotate_transform al_rotate_transform;
    da_al_rotate_transform_3d al_rotate_transform_3d;
    da_al_scale_transform al_scale_transform;
    da_al_scale_transform_3d al_scale_transform_3d;
    da_al_transform_coordinates al_transform_coordinates;
    da_al_transform_coordinates_3d al_transform_coordinates_3d;
    da_al_compose_transform al_compose_transform;
    da_al_get_current_transform al_get_current_transform;
    da_al_get_current_inverse_transform al_get_current_inverse_transform;
    da_al_get_current_projection_transform al_get_current_projection_transform;
    da_al_invert_transform al_invert_transform;
    da_al_check_inverse al_check_inverse;
    da_al_orthographic_transform al_orthographic_transform;
    da_al_perspective_transform al_perspective_transform;
    da_al_horizontal_shear_transform al_horizontal_shear_transform;
    da_al_vertical_shear_transform al_vertical_shear_transform;
    da_al_ustr_new al_ustr_new;
    da_al_ustr_new_from_buffer al_ustr_new_from_buffer;
    da_al_ustr_newf al_ustr_newf;
    da_al_ustr_free al_ustr_free;
    da_al_cstr al_cstr;
    da_al_ustr_to_buffer al_ustr_to_buffer;
    da_al_cstr_dup al_cstr_dup;
    da_al_ustr_dup al_ustr_dup;
    da_al_ustr_dup_substr al_ustr_dup_substr;
    da_al_ustr_empty_string al_ustr_empty_string;
    da_al_ref_cstr al_ref_cstr;
    da_al_ref_buffer al_ref_buffer;
    da_al_ref_ustr al_ref_ustr;
    da_al_ustr_size al_ustr_size;
    da_al_ustr_length al_ustr_length;
    da_al_ustr_offset al_ustr_offset;
    da_al_ustr_next al_ustr_next;
    da_al_ustr_prev al_ustr_prev;
    da_al_ustr_get al_ustr_get;
    da_al_ustr_get_next al_ustr_get_next;
    da_al_ustr_prev_get al_ustr_prev_get;
    da_al_ustr_insert al_ustr_insert;
    da_al_ustr_insert_cstr al_ustr_insert_cstr;
    da_al_ustr_insert_chr al_ustr_insert_chr;
    da_al_ustr_append al_ustr_append;
    da_al_ustr_append_cstr al_ustr_append_cstr;
    da_al_ustr_append_chr al_ustr_append_chr;
    da_al_ustr_appendf al_ustr_appendf;
    da_al_ustr_vappendf al_ustr_vappendf;
    da_al_ustr_remove_chr al_ustr_remove_chr;
    da_al_ustr_remove_range al_ustr_remove_range;
    da_al_ustr_truncate al_ustr_truncate;
    da_al_ustr_ltrim_ws al_ustr_ltrim_ws;
    da_al_ustr_rtrim_ws al_ustr_rtrim_ws;
    da_al_ustr_trim_ws al_ustr_trim_ws;
    da_al_ustr_assign al_ustr_assign;
    da_al_ustr_assign_substr al_ustr_assign_substr;
    da_al_ustr_assign_cstr al_ustr_assign_cstr;
    da_al_ustr_set_chr al_ustr_set_chr;
    da_al_ustr_replace_range al_ustr_replace_range;
    da_al_ustr_find_chr al_ustr_find_chr;
    da_al_ustr_rfind_chr al_ustr_rfind_chr;
    da_al_ustr_find_set al_ustr_find_set;
    da_al_ustr_find_set_cstr al_ustr_find_set_cstr;
    da_al_ustr_find_cset al_ustr_find_cset;
    da_al_ustr_find_cset_cstr al_ustr_find_cset_cstr;
    da_al_ustr_find_str al_ustr_find_str;
    da_al_ustr_find_cstr al_ustr_find_cstr;
    da_al_ustr_rfind_str al_ustr_rfind_str;
    da_al_ustr_rfind_cstr al_ustr_rfind_cstr;
    da_al_ustr_find_replace al_ustr_find_replace;
    da_al_ustr_find_replace_cstr al_ustr_find_replace_cstr;
    da_al_ustr_equal al_ustr_equal;
    da_al_ustr_compare al_ustr_compare;
    da_al_ustr_ncompare al_ustr_ncompare;
    da_al_ustr_has_prefix al_ustr_has_prefix;
    da_al_ustr_has_prefix_cstr al_ustr_has_prefix_cstr;
    da_al_ustr_has_suffix al_ustr_has_suffix;
    da_al_ustr_has_suffix_cstr al_ustr_has_suffix_cstr;
    da_al_utf8_width al_utf8_width;
    da_al_utf8_encode al_utf8_encode;
    da_al_ustr_new_from_utf16 al_ustr_new_from_utf16;
    da_al_ustr_size_utf16 al_ustr_size_utf16;
    da_al_ustr_encode_utf16 al_ustr_encode_utf16;
    da_al_utf16_width al_utf16_width;
    da_al_utf16_encode al_utf16_encode;
}
