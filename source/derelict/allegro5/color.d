/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license ( the "Software" ) to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.allegro5.color;

private {
    import derelict.util.loader;

    import derelict.allegro5.internal,
           derelict.allegro5.types;

    enum libNames = genLibNames( "Color" );
}

extern( C ) nothrow {
    alias da_al_get_allegro_color_version = uint function();
    alias da_al_color_hsv_to_rgb = void function( float, float, float, float*, float*, float* );
    alias da_al_color_rgb_to_hsl = void function( float, float, float, float*, float*, float* );
    alias da_al_color_rgb_to_hsv = void function( float, float, float, float*, float*, float* );
    alias da_al_color_hsl_to_rgb = void function( float, float, float, float*, float*, float* );
    alias da_al_color_name_to_rgb = bool function( const( char )*, float*, float*, float* );
    alias da_al_color_rgb_to_name = const( char )* function( float, float, float );
    alias da_al_color_cmyk_to_rgb = void function( float, float, float, float, float*, float*, float* );
    alias da_al_color_rgb_to_cmyk = void function( float, float, float, float*, float*, float*, float* );
    alias da_al_color_yuv_to_rgb = void function( float, float, float, float*, float*, float* );
    alias da_al_color_rgb_to_yuv = void function( float, float, float, float*, float*, float* );
    alias da_al_color_rgb_to_html = void function( float, float, float, char* );
    alias da_al_color_html_to_rgb = void function( const( char )*, float*, float*, float* );
    alias da_al_color_yuv = ALLEGRO_COLOR function( float, float, float );
    alias da_al_color_cmyk = ALLEGRO_COLOR function( float, float, float, float );
    alias da_al_color_hsl = ALLEGRO_COLOR function( float, float, float );
    alias da_al_color_hsv = ALLEGRO_COLOR function( float, float, float );
    alias da_al_color_name = ALLEGRO_COLOR function( const( char )* );
    alias da_al_color_html = ALLEGRO_COLOR function( const( char )* );
}

__gshared {
    da_al_get_allegro_color_version al_get_allegro_color_version;
    da_al_color_hsv_to_rgb al_color_hsv_to_rgb;
    da_al_color_rgb_to_hsl al_color_rgb_to_hsl;
    da_al_color_rgb_to_hsv al_color_rgb_to_hsv;
    da_al_color_hsl_to_rgb al_color_hsl_to_rgb;
    da_al_color_name_to_rgb al_color_name_to_rgb;
    da_al_color_rgb_to_name al_color_rgb_to_name;
    da_al_color_cmyk_to_rgb al_color_cmyk_to_rgb;
    da_al_color_rgb_to_cmyk al_color_rgb_to_cmyk;
    da_al_color_yuv_to_rgb al_color_yuv_to_rgb;
    da_al_color_rgb_to_yuv al_color_rgb_to_yuv;
    da_al_color_rgb_to_html al_color_rgb_to_html;
    da_al_color_html_to_rgb al_color_html_to_rgb;
    da_al_color_yuv al_color_yuv;
    da_al_color_cmyk al_color_cmyk;
    da_al_color_hsl al_color_hsl;
    da_al_color_hsv al_color_hsv;
    da_al_color_name al_color_name;
    da_al_color_html al_color_html;
}

class DerelictAllegro5ColorLoader : SharedLibLoader {
    public this() {
        super( libNames );
    }

    protected override void loadSymbols() {
        bindFunc( cast( void** )&al_get_allegro_color_version, "al_get_allegro_color_version" );
        bindFunc( cast( void** )&al_color_hsv_to_rgb, "al_color_hsv_to_rgb" );
        bindFunc( cast( void** )&al_color_rgb_to_hsl, "al_color_rgb_to_hsl" );
        bindFunc( cast( void** )&al_color_rgb_to_hsv, "al_color_rgb_to_hsv" );
        bindFunc( cast( void** )&al_color_hsl_to_rgb, "al_color_hsl_to_rgb" );
        bindFunc( cast( void** )&al_color_name_to_rgb, "al_color_name_to_rgb" );
        bindFunc( cast( void** )&al_color_rgb_to_name, "al_color_rgb_to_name" );
        bindFunc( cast( void** )&al_color_cmyk_to_rgb, "al_color_cmyk_to_rgb" );
        bindFunc( cast( void** )&al_color_rgb_to_cmyk, "al_color_rgb_to_cmyk" );
        bindFunc( cast( void** )&al_color_yuv_to_rgb, "al_color_yuv_to_rgb" );
        bindFunc( cast( void** )&al_color_rgb_to_yuv, "al_color_rgb_to_yuv" );
        bindFunc( cast( void** )&al_color_rgb_to_html, "al_color_rgb_to_html" );
        bindFunc( cast( void** )&al_color_html_to_rgb, "al_color_html_to_rgb" );
        bindFunc( cast( void** )&al_color_yuv, "al_color_yuv" );
        bindFunc( cast( void** )&al_color_cmyk, "al_color_cmyk" );
        bindFunc( cast( void** )&al_color_hsl, "al_color_hsl" );
        bindFunc( cast( void** )&al_color_hsv, "al_color_hsv" );
        bindFunc( cast( void** )&al_color_name, "al_color_name" );
        bindFunc( cast( void** )&al_color_html, "al_color_html" );
    }
}

__gshared DerelictAllegro5ColorLoader DerelictAllegro5Color;

shared static this() {
    DerelictAllegro5Color = new DerelictAllegro5ColorLoader;
}